import unittest
import patchBitxfile

class RemoveBitStreamHeaderTest(unittest.TestCase):

    header_1 = [
        0x00, 0x09, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x0f, 0xf0, 0x00, 0x00, 0x01, 0x61, 0x00, 0x69,
        0x50, 0x58, 0x49, 0x65, 0x36, 0x35, 0x39, 0x32, 0x52, 0x5f, 0x54, 0x6f, 0x70, 0x5f, 0x47, 0x65,
        0x6e, 0x32, 0x78, 0x38, 0x3b, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x3d, 0x4e, 0x4f, 0x3b,
        0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x3d, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x3b,
        0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x30, 0x31, 0x37, 0x2e, 0x32, 0x2e, 0x31,
        0x5f, 0x41, 0x52, 0x37, 0x31, 0x32, 0x38, 0x39, 0x5f, 0x41, 0x52, 0x37, 0x30, 0x31, 0x37, 0x33,
        0x5f, 0x41, 0x52, 0x37, 0x30, 0x30, 0x36, 0x39, 0x5f, 0x41, 0x52, 0x36, 0x39, 0x36, 0x36, 0x33,
        0x5f, 0x41, 0x52, 0x36, 0x39, 0x34, 0x38, 0x35, 0x00, 0x62, 0x00, 0x0d, 0x37, 0x6b, 0x34, 0x31,
        0x30, 0x74, 0x66, 0x66, 0x67, 0x39, 0x30, 0x30, 0x00, 0x63, 0x00, 0x0b, 0x32, 0x30, 0x31, 0x38,
        0x2f, 0x31, 0x32, 0x2f, 0x32, 0x34, 0x00, 0x64, 0x00, 0x09, 0x30, 0x38, 0x3a, 0x34, 0x36, 0x3a,
        0x30, 0x39, 0x00, 0x65, 0x00, 0xf2, 0x47, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0xbb, 0x11, 0x22, 0x00, 0x44
            ]

    def test_header_1(self):
        # WHEN
        binStream = patchBitxfile.stripBitFileHeader(self.header_1)

        # THEN
        # 16 leading 0xffff words
        self.assertEqual(binStream[0], 0xff)
        self.assertEqual(binStream[15], 0xff)
        self.assertEqual(binStream[31], 0xff)
        # binary stream
        self.assertEqual(binStream[32], 0x00)
        self.assertEqual(binStream[33], 0x00)
        self.assertEqual(binStream[34], 0x00)
        self.assertEqual(binStream[35], 0xbb)
        self.assertEqual(binStream[36], 0x11)
        self.assertEqual(binStream[37], 0x22)

def dumpBitfileToString(fileName, bytesToDump):
    elementsPerLine = 16
    fin = open(fileName, 'rb')

    print("\theader_XXX = [")
    print("# of lines: {}".format( bytesToDump/elementsPerLine ))
    try:
        for lineNum in range(bytesToDump/elementsPerLine):
            bytesArray = fin.read(elementsPerLine)
            line = ""
            for i in range(elementsPerLine):
                line += "0x" + hex(ord(bytesArray[i]))[2:].zfill(2) + ", "
            line = line[:-1]
            print("\t\t{} ".format(line))
    finally:
        fin.close()
    print("\t             ]")

#dumpBitfileToString("PXIe6592R_Top_Gen2x8.bit", 0xb0)

if __name__ == '__main__':
    unittest.main()

